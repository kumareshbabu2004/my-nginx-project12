name: Build, Deploy with Rollback and Email Notifications

on:
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: 'Choose environment to deploy'
        required: true
        type: choice
        options:
          - stage
          - prod
      ROLLBACK_CHOICE:
        description: 'Do you want to rollback?' 
        required: true
        type: choice
        options:
          - "no"
          - "yes"
      ROLLBACK_VERSION:
        description: 'If yes, enter version to rollback (e.g., v1.0.0)'
        required: false

env:
  IMAGE_NAME: my-nginx-app
  DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}/my-nginx-app

jobs:
  build:
    name: üõ†Ô∏è Build Docker Image
    runs-on: self-hosted
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      previous_version: ${{ steps.get_version.outputs.previous_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get latest version and bump
        id: get_version
        run: |
          echo "Fetching tags..."
          LATEST_TAG=$(curl -s "https://registry.hub.docker.com/v2/repositories/${{ env.DOCKER_REPO }}/tags?page_size=100" | jq -r '.results[].name' | grep '^v' | sort -V | tail -n1)
          echo "Latest tag: $LATEST_TAG"
          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v1.0.0"
            PREVIOUS_TAG="v1.0.0"
          else
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
            PREVIOUS_TAG="$LATEST_TAG"
          fi
          echo "version=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "previous_version=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "$PREVIOUS_TAG" > prev_version.txt

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_REPO }}:${{ steps.get_version.outputs.version }} .

      - name: Tag as latest
        run: docker tag ${{ env.DOCKER_REPO }}:${{ steps.get_version.outputs.version }} ${{ env.DOCKER_REPO }}:latest

      - name: Save Docker image
        run: docker save ${{ env.DOCKER_REPO }}:${{ steps.get_version.outputs.version }} ${{ env.DOCKER_REPO }}:latest -o my-nginx-app.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-nginx-app.tar

      - name: Upload previous version info
        uses: actions/upload-artifact@v4
        with:
          name: prev-version
          path: prev_version.txt

  push:
    name: üì¶ Push to Docker Hub
    needs: build
    runs-on: self-hosted
    outputs:
      version: ${{ needs.build.outputs.version }}
      previous_version: ${{ needs.build.outputs.previous_version }}
    steps:
      - name: Download image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Download prev version
        uses: actions/download-artifact@v4
        with:
          name: prev-version

      - name: Load Docker image
        run: docker load -i my-nginx-app.tar

      - name: Log in to Docker
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push image
        run: |
          docker push ${{ env.DOCKER_REPO }}:${{ needs.build.outputs.version }}
          docker push ${{ env.DOCKER_REPO }}:latest

  deploy-stage:
    if: github.event.inputs.ENVIRONMENT == 'stage'
    name: üöÄ Deploy to Stage
    needs: push
    runs-on: self-hosted
    steps:
      - name: Set stage port
        run: echo "APP_PORT=81" >> $GITHUB_ENV

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Deploy stage container
        run: |
          docker pull ${{ env.DOCKER_REPO }}:latest
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p $APP_PORT:80 ${{ env.DOCKER_REPO }}:latest

  deploy-prod:
    if: github.event.inputs.ENVIRONMENT == 'prod'
    name: üöÄ Deploy to Prod
    needs: push
    runs-on: ubuntu-latest
    steps:
      - name: Set prod port
        run: echo "APP_PORT=82" >> $GITHUB_ENV

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Deploy prod container
        run: |
          docker pull ${{ env.DOCKER_REPO }}:latest
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p $APP_PORT:80 ${{ env.DOCKER_REPO }}:latest

  rollback:
    if: >
      (github.event.inputs.ROLLBACK_CHOICE == 'yes') || failure()
    name: üîÅ Rollback if Needed
    runs-on: ${{ github.event.inputs.ENVIRONMENT == 'stage' && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set rollback version
        run: |
          if [[ "${{ github.event.inputs.ROLLBACK_VERSION }}" != "" ]]; then
            echo "ROLLBACK_VERSION=${{ github.event.inputs.ROLLBACK_VERSION }}" >> $GITHUB_ENV
          else
            echo "ROLLBACK_VERSION=$(cat prev_version.txt)" >> $GITHUB_ENV
          fi

      - name: Set port
        run: |
          if [[ "${{ github.event.inputs.ENVIRONMENT }}" == "prod" ]]; then
            echo "APP_PORT=82" >> $GITHUB_ENV
          else
            echo "APP_PORT=81" >> $GITHUB_ENV
          fi

      - name: Pull and run rollback container
        run: |
          docker pull ${{ env.DOCKER_REPO }}:$ROLLBACK_VERSION || true
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p $APP_PORT:80 ${{ env.DOCKER_REPO }}:$ROLLBACK_VERSION

  notify:
    name: üìß Send Email Notification
    if: always()
    needs: [deploy-stage, deploy-prod, rollback]
    runs-on: ${{ github.event.inputs.ENVIRONMENT == 'stage' && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - name: Send Success Email 
        if: success()
        run: |
          SUBJECT="GitHub Actions SUCCESS: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="SUCCESS: Deployment succeeded for commit ${{ github.sha }} in repository ${{ github.repository }}.
          Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure

      - name: Send Failure Email 
        if: failure()
        run: |
          SUBJECT="GitHub Actions FAILURE: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="FAILURE: Deployment failed for commit ${{ github.sha }} in repository ${{ github.repository }}.
          Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure
