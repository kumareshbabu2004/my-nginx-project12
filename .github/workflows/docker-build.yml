name: Build, Push, Deploy with Versioning, Rollback, and Email Notifications

on:
  push:
    branches: [main, master]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-nginx-app

jobs:
  bump-version:
    name: ⬆️ Bump Version
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.set_version.outputs.new_tag }}
      old_tag: ${{ steps.set_version.outputs.old_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Bump version
        id: set_version
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          if [ ! -f version.txt ]; then echo "v1.0" > version.txt; fi
          OLD_TAG=$(cat version.txt)
          VERSION_NUMBER=$(echo $OLD_TAG | cut -d 'v' -f2)
          MAJOR=$(echo $VERSION_NUMBER | cut -d '.' -f1)
          MINOR=$(echo $VERSION_NUMBER | cut -d '.' -f2)
          NEW_MINOR=$((MINOR + 1))
          NEW_TAG="v${MAJOR}.${NEW_MINOR}"

          echo "Old Tag: $OLD_TAG"
          echo "New Tag: $NEW_TAG"

          echo $NEW_TAG > version.txt

          git add version.txt
          git commit -m "Bump version to $NEW_TAG"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }} HEAD:main

          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "old_tag=$OLD_TAG" >> $GITHUB_OUTPUT

  build:
    name: 🛠️ Build Docker Image
    needs: bump-version
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ needs.bump-version.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and tag image
        run: |
          docker build -t $IMAGE_NAME:${{ needs.bump-version.outputs.new_tag }} .
          docker tag $IMAGE_NAME:${{ needs.bump-version.outputs.new_tag }} $IMAGE_NAME:latest

      - name: Save Docker image
        run: docker save $IMAGE_NAME:${{ needs.bump-version.outputs.new_tag }} -o my-nginx-app.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-nginx-app.tar

  push:
    name: 📦 Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ needs.build.outputs.new_tag }}

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load -i my-nginx-app.tar

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push version tag
        run: docker push $IMAGE_NAME:${{ needs.build.outputs.new_tag }}

      - name: Push latest tag
        run: docker push $IMAGE_NAME:latest

  deploy:
    name: 🚀 Deploy on self-hosted runner
    needs: push
    runs-on: self-hosted
    continue-on-error: true

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull and run latest container
        run: |
          docker pull $IMAGE_NAME:latest
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 $IMAGE_NAME:latest

  rollback:
    name: 🔁 Rollback on failure
    needs: [deploy, bump-version]
    if: failure()
    runs-on: self-hosted

    steps:
      - name: Rollback to previous version
        run: |
          echo "Deployment failed. Rolling back to previous version..."
          docker stop myapp || true
          docker rm myapp || true
          docker pull $IMAGE_NAME:${{ needs.bump-version.outputs.old_tag }}
          docker run -d --name myapp -p 81:80 $IMAGE_NAME:${{ needs.bump-version.outputs.old_tag }}

  notify:
    name: 📧 Email Notifications
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send success email
        if: success()
        run: |
          SUBJECT="✅ SUCCESS: Deployment $IMAGE_NAME"
          BODY="Deployment succeeded for commit ${{ github.sha }}.
          Check it here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure

      - name: Send failure email
        if: failure()
        run: |
          SUBJECT="❌ FAILURE: Deployment $IMAGE_NAME"
          BODY="Deployment failed for commit ${{ github.sha }}.
          Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure
