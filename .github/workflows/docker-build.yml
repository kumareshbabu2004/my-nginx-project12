name: Build, Push, Deploy with Rollback and Email Notifications

on:
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'index.html'
      - 'version.txt'
  workflow_dispatch:
    inputs:
      ROLLBACK_CHOICE:
        description: 'Do you want to rollback?'
        required: true
        type: choice
        options:
          - "no"
          - "yes"
      ROLLBACK_VERSION:
        description: 'If yes, enter version to rollback (e.g., v1.1.0)'
        required: false

jobs:
  build:
    name: üõ†Ô∏è Build Docker Image and Generate Version Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      previous_version: ${{ steps.save_prev.outputs.previous_version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get Latest Docker Tag and Increment Patch Version
        id: get_version
        run: |
          REPO="${{ secrets.DOCKER_USERNAME }}/my-nginx-app"
          echo "Fetching tags for $REPO"
          LATEST_TAG=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags?page_size=100" | \
            jq -r '.results[].name' | grep '^v' | sort -V | tail -n1)
          echo "Latest tag is $LATEST_TAG"
          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v1.0.0"
          else
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          fi
          echo "New tag is $NEW_TAG"
          echo "version=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Save Previous Version for Rollback
        id: save_prev
        run: |
          PREV_TAG="${LATEST_TAG:-v1.0.0}"
          echo "previous_version=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Create previous version file
        run: echo "${{ steps.save_prev.outputs.previous_version }}" > prev_version.txt

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.get_version.outputs.version }} .

      - name: Tag image as latest
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.get_version.outputs.version }} ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

      - name: Save Docker Images as Tarball (versioned and latest)
        run: |
          docker save \
            ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.get_version.outputs.version }} \
            ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest \
            -o my-nginx-app.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-nginx-app.tar

      - name: Upload Previous Version Artifact
        uses: actions/upload-artifact@v4
        with:
          name: prev-version
          path: prev_version.txt

  push:
    name: üì¶ Push to Docker Hub
    needs: build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.build.outputs.version }}
      previous_version: ${{ needs.build.outputs.previous_version }}

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Download Previous Version Artifact
        uses: actions/download-artifact@v4
        with:
          name: prev-version

      - name: Load Docker Images
        run: docker load -i my-nginx-app.tar

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Images (versioned & latest)
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.version }}
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  deploy:
    name: üöÄ Deploy Locally
    needs: push
    if: github.event_name != 'workflow_dispatch'
    runs-on: self-hosted

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull and Run Latest Image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  rollback:
    name: üîÅ Rollback on Failure or Manual Trigger
    needs: [push, deploy]
    if: >
      (failure() && github.event_name != 'workflow_dispatch')
      || (github.event_name == 'workflow_dispatch' && github.event.inputs.ROLLBACK_CHOICE == 'yes')
    runs-on: self-hosted

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Download Previous Version Artifact
        if: github.event_name != 'workflow_dispatch'
        uses: actions/download-artifact@v4
        with:
          name: prev-version

      - name: Set rollback version
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.ROLLBACK_CHOICE }}" = "yes" ] && [ -n "${{ github.event.inputs.ROLLBACK_VERSION }}" ]; then
            echo "ROLLBACK_VERSION=${{ github.event.inputs.ROLLBACK_VERSION }}" >> $GITHUB_ENV
          else
            PREV_TAG=$(cat prev_version.txt)
            echo "ROLLBACK_VERSION=$PREV_TAG" >> $GITHUB_ENV
          fi

      - name: Rollback to Previous Version
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:$ROLLBACK_VERSION || true
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:$ROLLBACK_VERSION

  notify:
    name: üìß Send Email Notification
    needs: [deploy, rollback]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Success Email
        if: success()
        run: |
          SUBJECT="GitHub Actions SUCCESS: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="SUCCESS: Deployment succeeded for commit ${{ github.sha }} in repository ${{ github.repository }}.
          Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure

      - name: Send Failure Email
        if: failure()
        run: |
          SUBJECT="GitHub Actions FAILURE: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="FAILURE: Deployment failed for commit ${{ github.sha }} in repository ${{ github.repository }}.
          Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure
