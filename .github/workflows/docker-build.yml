name: Build, Push, Deploy with Rollback and Email Notifications

on:
  push:
    branches: [main, master]

jobs:
  build:
    name: 🛠️ Build Docker Image
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Docker Tag (e.g., v1.1)
        id: set_tag
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          TAG="v1-${TIMESTAMP}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.set_tag.outputs.tag }} .

      - name: Tag as latest
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.set_tag.outputs.tag }} ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.set_tag.outputs.tag }}
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  deploy:
    name: 🚀 Deploy Latest
    needs: build
    runs-on: self-hosted

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull and Run Latest Image
        run: |
          echo "Pulling latest image..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

          echo "Stopping and removing current container if exists..."
          docker stop myapp || true
          docker rm myapp || true

          echo "Running new container on port 81..."
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  rollback:
    name: 🔁 Rollback on Failure
    needs: deploy
    if: failure()
    runs-on: self-hosted

    steps:
      - name: Rollback to Previous Version (e.g., v1.1)
        run: |
          echo "Deployment failed. Rolling back..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:v1.1
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:v1.1

  notify:
    name: 📧 Send Email Notification
    needs: [deploy, rollback]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Success Email
        if: needs.deploy.result == 'success'
        run: |
          SUBJECT="✅ Deployment Success - Run #${{ github.run_number }}"
          BODY="The deployment succeeded for commit ${{ github.sha }}.
          See: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure

      - name: Send Failure Email
        if: needs.deploy.result == 'failure'
        run: |
          SUBJECT="❌ Deployment Failed - Run #${{ github.run_number }}"
          BODY="The deployment FAILED for commit ${{ github.sha }}.
          Rolled back to v1.1. See: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure
