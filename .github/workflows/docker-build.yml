name: Build, Push, Deploy with Rollback and Email Notifications

on:
  push:
    branches: [main, master]

permissions:
  contents: write  # Needed for pushing version.txt

jobs:
  bump-version:
    name: 🔢 Bump Docker Tag
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
      old_tag: ${{ steps.bump.outputs.old_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Bump Version
        id: bump
        run: |
          CURRENT_TAG=$(cat version.txt)
          OLD_TAG=$CURRENT_TAG
          VERSION_NUMBER=$(echo $CURRENT_TAG | cut -d 'v' -f2)
          MAJOR=$(echo $VERSION_NUMBER | cut -d '.' -f1)
          MINOR=$(echo $VERSION_NUMBER | cut -d '.' -f2)
          NEW_MINOR=$((MINOR + 1))
          NEW_TAG="v${MAJOR}.${NEW_MINOR}"

          echo "Old Tag: $OLD_TAG"
          echo "New Tag: $NEW_TAG"

          echo $NEW_TAG > version.txt
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "old_tag=$OLD_TAG" >> $GITHUB_OUTPUT

      - name: Commit & Push updated version.txt
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add version.txt
          git commit -m "Bump version to ${{ steps.bump.outputs.new_tag }}" || echo "No changes"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: 🛠️ Build Docker Image
    needs: bump-version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.bump-version.outputs.new_tag }}

      - name: Save Docker Image as Tarball
        run: docker save ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.bump-version.outputs.new_tag }} -o my-nginx-app.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-nginx-app.tar

  push:
    name: 📦 Push to Docker Hub
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i my-nginx-app.tar

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.bump-version.outputs.new_tag }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.bump-version.outputs.new_tag }} ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  deploy:
    name: 🚀 Deploy to Self-Hosted
    needs: push
    runs-on: self-hosted

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull and Deploy Latest
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  rollback:
    name: 🔁 Rollback if Deploy Fails
    needs: [deploy, bump-version]
    if: failure()
    runs-on: self-hosted

    steps:
      - name: Rollback to Previous Version
        run: |
          echo "Deployment failed. Rolling back to ${{ needs.bump-version.outputs.old_tag }}"
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.bump-version.outputs.old_tag }}
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.bump-version.outputs.old_tag }}

  notify:
    name: 📧 Email Notification
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Email
        run: |
          STATUS="${{ job.status }}"
          SUBJECT="GitHub Actions $STATUS: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="$STATUS: Deployment $STATUS for commit ${{ github.sha }} in repo ${{ github.repository }}.
          Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure
