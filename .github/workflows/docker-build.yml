name: Build, Push, Deploy with Versioned Rollback and Email Notifications

on:
  push:
    branches: [main, master]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-nginx-app

jobs:
  bump-version:
    name: ⬆️ Bump Version
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
      old_tag: ${{ steps.bump.outputs.old_tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Bump Version
        id: bump
        run: |
          if [ ! -f version.txt ]; then echo "v1.0" > version.txt; fi
          OLD_TAG=$(cat version.txt)
          VERSION_NUM=$(echo $OLD_TAG | sed 's/v//')
          MAJOR=$(echo $VERSION_NUM | cut -d. -f1)
          MINOR=$(echo $VERSION_NUM | cut -d. -f2)
          NEW_MINOR=$((MINOR + 1))
          NEW_TAG="v$MAJOR.$NEW_MINOR"
          echo $NEW_TAG > version.txt
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "old_tag=$OLD_TAG" >> $GITHUB_OUTPUT

      - name: Upload version.txt
        uses: actions/upload-artifact@v4
        with:
          name: version-file
          path: version.txt

  build:
    name: 🛠️ Build Docker Image
    needs: bump-version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Version File
        uses: actions/download-artifact@v4
        with:
          name: version-file

      - name: Read Version
        id: read_version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:${{ steps.read_version.outputs.VERSION }} .
          docker tag $IMAGE_NAME:${{ steps.read_version.outputs.VERSION }} $IMAGE_NAME:latest

      - name: Save Docker Image as Tarball
        run: docker save $IMAGE_NAME:${{ steps.read_version.outputs.VERSION }} -o my-nginx-app.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-nginx-app.tar

  push:
    name: 📦 Push to Docker Hub
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Download Version File
        uses: actions/download-artifact@v4
        with:
          name: version-file

      - name: Read Version
        id: read_version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: Load Docker Image
        run: docker load -i my-nginx-app.tar

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Images
        run: |
          docker push $IMAGE_NAME:${{ steps.read_version.outputs.VERSION }}
          docker push $IMAGE_NAME:latest

      - name: Tag previous version as rollback
        if: ${{ steps.bump.outputs.old_tag != '' }}
        run: |
          # Pull the previous version image to ensure it exists
          docker pull $IMAGE_NAME:${{ needs.bump-version.outputs.old_tag }} || exit 0

          # Tag previous version as rollback
          docker tag $IMAGE_NAME:${{ needs.bump-version.outputs.old_tag }} $IMAGE_NAME:rollback

          # Push rollback tag
          docker push $IMAGE_NAME:rollback

  deploy:
    name: 🚀 Deploy to Self-Hosted
    needs: [push, bump-version]
    runs-on: self-hosted
    continue-on-error: true

    steps:
      - name: Pull and Deploy Latest Image
        run: |
          docker stop myapp || true
          docker rm myapp || true
          docker pull $IMAGE_NAME:latest
          docker run -d --name myapp -p 81:80 $IMAGE_NAME:latest

  rollback:
    name: 🔁 Rollback on Failure
    needs: [deploy]
    if: failure()
    runs-on: self-hosted

    steps:
      - name: Rollback to Rollback Tag
        run: |
          echo "Deployment failed. Rolling back to rollback tag..."
          docker stop myapp || true
          docker rm myapp || true
          docker pull $IMAGE_NAME:rollback
          docker run -d --name myapp -p 81:80 $IMAGE_NAME:rollback

  notify:
    name: 📧 Email Notification
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Success Email
        if: success()
        run: |
          SUBJECT="✅ SUCCESS: Deployment of $IMAGE_NAME"
          BODY="Deployment succeeded for $IMAGE_NAME:latest.\nCommit: ${{ github.sha }}\nURL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt
          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure

      - name: Send Failure Email
        if: failure()
        run: |
          SUBJECT="❌ FAILURE: Deployment of $IMAGE_NAME"
          BODY="Deployment failed for $IMAGE_NAME:latest.\nCommit: ${{ github.sha }}\nURL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt
          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure
