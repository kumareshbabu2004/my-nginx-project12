name: Build, Push, Deploy with Rollback and Email Notifications

on:
  push:
    branches: [main, master]

jobs:
  build:
    name: üõ†Ô∏è Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set Version Tag
        id: tag
        run: |
          fallback="v1.0.0"
          latest=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/my-nginx-app/tags | jq -r '.results[].name' | grep '^v' | sort -V | tail -n1)
          if [[ -z "$latest" ]]; then
            new_tag="$fallback"
          else
            IFS='.' read -r major minor patch <<< "${latest#v}"
            new_tag="v$major.$minor.$((patch + 1))"
          fi
          echo "tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest \
                       -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.tag.outputs.tag }} .

      - name: Save Docker Image as Tarball
        run: docker save ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.tag.outputs.tag }} -o my-nginx-app.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-nginx-app.tar

  push:
    name: üì¶ Push to Docker Hub
    needs: build
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.build.outputs.tag }}

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i my-nginx-app.tar

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image (Tagged and Latest)
        run: |
          if [ -z "$TAG" ]; then
            echo "‚ùå ERROR: TAG variable is empty. Aborting push."
            exit 1
          fi
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:$TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  deploy:
    name: üöÄ Deploy Locally
    needs: push
    runs-on: self-hosted

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull and Run Latest Image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  rollback:
    name: üîÅ Rollback on Failure
    needs: deploy
    if: failure()
    runs-on: self-hosted

    steps:
      - name: Rollback to Previous Version
        run: |
          echo "Deployment failed. Rolling back..."
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:rollback

  notify:
    name: üìß Send Email Notification
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Success Email
        if: success()
        run: |
          SUBJECT="‚úÖ SUCCESS: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="Deployment succeeded.\n\nCommit: ${{ github.sha }}\nRepo: ${{ github.repository }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt
          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
               --mail-from "${{ secrets.GMAIL_USER }}" \
               --mail-rcpt "${{ secrets.TO_EMAIL }}" \
               --upload-file mail.txt \
               --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
               --insecure

      - name: Send Failure Email
        if: failure()
        run: |
          SUBJECT="‚ùå FAILURE: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="Deployment failed.\n\nCommit: ${{ github.sha }}\nRepo: ${{ github.repository }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt
          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
               --mail-from "${{ secrets.GMAIL_USER }}" \
               --mail-rcpt "${{ secrets.TO_EMAIL }}" \
               --upload-file mail.txt \
               --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
               --insecure
