name: Build, Push, Deploy with Rollback and Email Notifications

on:
  push:
    branches: [main, master]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-nginx-app

jobs:
  bump-version:
    name: 🔢 Bump Version
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.set-tag.outputs.new_tag }}
      old_tag: ${{ steps.set-tag.outputs.old_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Ensure version.txt exists
        run: |
          if [ ! -f version.txt ]; then
            echo "v1.0" > version.txt
          fi

      - name: Bump version
        id: set-tag
        run: |
          CURRENT_TAG=$(cat version.txt)
          OLD_TAG=$CURRENT_TAG
          VERSION_NUMBER=$(echo $CURRENT_TAG | cut -d 'v' -f2)
          MAJOR=$(echo $VERSION_NUMBER | cut -d '.' -f1)
          MINOR=$(echo $VERSION_NUMBER | cut -d '.' -f2)
          NEW_MINOR=$((MINOR + 1))
          NEW_TAG="v${MAJOR}.${NEW_MINOR}"

          echo "Old Tag: $OLD_TAG"
          echo "New Tag: $NEW_TAG"
          echo $NEW_TAG > version.txt

          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "old_tag=$OLD_TAG" >> $GITHUB_OUTPUT

      - name: Commit updated version.txt
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git commit -am "Bump version to ${{ steps.set-tag.outputs.new_tag }}"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}

  build:
    name: 🛠️ Build Docker Image
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:${{ needs.bump-version.outputs.new_tag }} .

      - name: Save Docker Image as Tarball
        run: docker save $IMAGE_NAME:${{ needs.bump-version.outputs.new_tag }} -o my-nginx-app.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-nginx-app.tar

  push:
    name: 📦 Push to Docker Hub
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i my-nginx-app.tar

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image with Tag
        run: |
          docker push $IMAGE_NAME:${{ needs.bump-version.outputs.new_tag }}
          docker tag $IMAGE_NAME:${{ needs.bump-version.outputs.new_tag }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

  deploy:
    name: 🚀 Deploy Locally
    needs: push
    runs-on: self-hosted
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull and Run Latest Image
        run: |
          docker pull $IMAGE_NAME:latest
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 $IMAGE_NAME:latest

  rollback:
    name: 🔁 Rollback on Failure
    needs: [deploy, bump-version]
    if: failure()
    runs-on: self-hosted
    steps:
      - name: Rollback to Previous Version
        run: |
          echo "Rolling back to $IMAGE_NAME:${{ needs.bump-version.outputs.old_tag }}"
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 $IMAGE_NAME:${{ needs.bump-version.outputs.old_tag }}

  notify:
    name: 📧 Send Email Notification
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Success Email
        if: success()
        run: |
          SUBJECT="✅ Deployment SUCCESS: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="Deployment succeeded for commit ${{ github.sha }}.\n\nRun URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt
          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" --insecure

      - name: Send Failure Email
        if: failure()
        run: |
          SUBJECT="❌ Deployment FAILURE: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="Deployment failed for commit ${{ github.sha }}.\n\nRun URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt
          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" --insecure
