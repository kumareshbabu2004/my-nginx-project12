name: Build, Push, Deploy with Rollback and Versioning

on:
  push:
    branches: [main]

jobs:
  build:
    name: üõ†Ô∏è Build Docker Image and Generate Version Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      previous_version: ${{ steps.get_version.outputs.previous_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: get_version
        name: Get Latest Docker Tag and Increment Version
        run: |
          REPO="${{ secrets.DOCKER_USERNAME }}/my-nginx-app"
          echo "Fetching tags for $REPO"

          LATEST_TAG=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags?page_size=100" | \
            jq -r '.results[].name' | grep '^v' | sort -V | tail -n1)

          echo "Latest tag: $LATEST_TAG"

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v1.0.0"
            PREV_TAG="v0.0.0"
          else
            PREV_TAG=$LATEST_TAG
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "New tag: $NEW_TAG"
          echo "version=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "previous_version=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.get_version.outputs.version }} .

      - name: Tag image as latest
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.get_version.outputs.version }} ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  push:
    name: üì¶ Push Docker Image to Docker Hub
    needs: build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.build.outputs.version }}
      previous_version: ${{ needs.build.outputs.previous_version }}

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push versioned image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.version }}

      - name: Push latest tag
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  deploy:
    name: üöÄ Deploy Docker Container on Self-Hosted Runner
    needs: push
    runs-on: self-hosted

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull new image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.version }}

      - name: Stop existing container if exists
        run: |
          if docker ps -q -f name=my-nginx-app; then
            docker stop my-nginx-app
          fi
          if docker ps -aq -f name=my-nginx-app; then
            docker rm my-nginx-app
          fi

      - name: Run new container on port 81
        run: |
          docker run -d --name my-nginx-app -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.version }}

  rollback:
    name: üîÅ Rollback on Failure
    needs: deploy
    if: failure()
    runs-on: self-hosted

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull previous stable image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.previous_version }}

      - name: Stop failed container and remove it
        run: |
          if docker ps -q -f name=my-nginx-app; then
            docker stop my-nginx-app
          fi
          if docker ps -aq -f name=my-nginx-app; then
            docker rm my-nginx-app
          fi

      - name: Run previous stable container on port 81
        run: |
          docker run -d --name my-nginx-app -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.previous_version }}

  notify:
    name: üìß Send Email Notification
    needs: [deploy, rollback]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Success Email
        if: success()
        run: |
          SUBJECT="‚úÖ Deployment SUCCESS - ${{ github.workflow }} #${{ github.run_number }}"
          BODY="Deployment succeeded for commit ${{ github.sha }} in repo ${{ github.repository }}.
          See run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure

      - name: Send Failure Email
        if: failure()
        run: |
          SUBJECT="‚ùå Deployment FAILURE - ${{ github.workflow }} #${{ github.run_number }}"
          BODY="Deployment failed for commit ${{ github.sha }} in repo ${{ github.repository }}.
          See run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure
