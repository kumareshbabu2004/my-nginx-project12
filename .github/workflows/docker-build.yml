name: Build, Push, Deploy with Rollback and Email

on:
  push:
    branches: [main, master]

jobs:
  build:
    name: üõ†Ô∏è Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set Docker Image Tag
        id: set_tag
        run: |
          fallback_tag="v1.0.0"
          latest=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/my-nginx-app/tags | jq -r '.results[].name' | grep '^v' | sort -V | tail -n1)

          if [[ -z "$latest" ]]; then
            new_tag="$fallback_tag"
          else
            IFS='.' read -r major minor patch <<< "${latest#v}"
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
          fi

          echo "New image tag: $new_tag"
          echo "image_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Build Docker Image with version + latest tags
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.set_tag.outputs.image_tag }} \
                       -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest .

      - name: Save Docker Image
        run: docker save ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.set_tag.outputs.image_tag }} -o my-nginx-app.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-nginx-app.tar

  push:
    name: üì¶ Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ needs.build.outputs.image_tag }}

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i my-nginx-app.tar

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Images (version + latest)
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.image_tag }}
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  deploy:
    name: üöÄ Deploy Locally
    needs: push
    runs-on: self-hosted
    outputs:
      deployed_tag: ${{ needs.push.outputs.image_tag }}

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull and Run New Image
        run: |
          TAG=${{ needs.push.outputs.image_tag }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:$TAG
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:$TAG
          echo $TAG > deployed_tag.txt

      - name: Upload deployed tag
        uses: actions/upload-artifact@v4
        with:
          name: deployed-tag
          path: deployed_tag.txt

  rollback:
    name: üîÅ Rollback on Failure
    needs: deploy
    if: failure()
    runs-on: self-hosted

    steps:
      - name: Download Deployed Tag
        uses: actions/download-artifact@v4
        with:
          name: deployed-tag
          path: .

      - name: Rollback to Previous Version
        run: |
          CURRENT_TAG=$(cat deployed_tag.txt)
          echo "Current tag was: $CURRENT_TAG"

          TAGS=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/my-nginx-app/tags | jq -r '.results[].name' | grep '^v' | sort -V)
          prev=""
          for t in $TAGS; do
            if [[ "$t" == "$CURRENT_TAG" ]]; then break; fi
            prev="$t"
          done

          if [[ -z "$prev" ]]; then
            echo "No previous version found. Falling back to 'latest'"
            prev="latest"
          fi

          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:$prev
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:$prev

  notify:
    name: üìß Email Notification
    needs: [deploy, rollback]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Email Notification
        run: |
          STATUS="SUCCESS"
          if [[ "${{ needs.deploy.result }}" == "failure" ]]; then STATUS="FAILURE"; fi
          TAG="${{ needs.deploy.outputs.deployed_tag || 'unknown' }}"

          SUBJECT="GitHub Actions $STATUS: Deployment"
          BODY="$STATUS deploying image tag $TAG for commit ${{ github.sha }} in repo ${{ github.repository }}.
          Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure
