name: Build, Push, Deploy with Rollback and Email Notifications

on:
  push:
    branches: [main, master]

jobs:
  build:
    name: 🛠️ Build Docker Image
    runs-on: ubuntu-latest

    outputs:
      new_tag: ${{ steps.set_tag.outputs.new_tag }}
      previous_tag: ${{ steps.set_tag.outputs.previous_tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Docker Tag
        id: set_tag
        run: |
          echo "Fetching existing tags..."
          tags=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/my-nginx-app/tags?page_size=100" | jq -r '.results[].name' | grep -E '^v[0-9]+\.[0-9]+$' | sort -V)

          latest_tag=$(echo "$tags" | tail -n 1)
          if [[ -z "$latest_tag" ]]; then
            new_tag="v1.0"
            previous_tag="v1.0"
          else
            major=$(echo $latest_tag | cut -d. -f1 | tr -d v)
            minor=$(echo $latest_tag | cut -d. -f2)
            new_minor=$((minor + 1))
            new_tag="v${major}.${new_minor}"
            previous_tag="$latest_tag"
          fi

          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          echo "previous_tag=$previous_tag" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image with Tags
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest \
                       -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.set_tag.outputs.new_tag }} .

      - name: Save Docker Image as Tarball
        run: docker save ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ steps.set_tag.outputs.new_tag }} -o my-nginx-app.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-nginx-app.tar

  push:
    name: 📦 Push to Docker Hub
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i my-nginx-app.tar

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.new_tag }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.new_tag }} ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  deploy:
    name: 🚀 Deploy Application
    needs: push
    runs-on: self-hosted

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Deploy Latest Image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.new_tag }}
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.new_tag }}

  rollback:
    name: 🔁 Rollback on Failure
    needs: deploy
    if: failure()
    runs-on: self-hosted

    steps:
      - name: Rollback to Previous Version
        run: |
          echo "Rolling back to ${{ needs.build.outputs.previous_tag }}..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.previous_tag }}
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:${{ needs.build.outputs.previous_tag }}

  notify:
    name: 📧 Send Email Notification
    needs: [deploy, rollback]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Email Notification
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            STATUS="SUCCESS"
          else
            STATUS="FAILURE"
          fi

          SUBJECT="GitHub Actions $STATUS: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="$STATUS: Deployment status for commit ${{ github.sha }} in repository ${{ github.repository }}.
          Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo -e "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure
