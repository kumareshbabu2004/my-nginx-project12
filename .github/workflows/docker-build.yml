name: Build, Push, Deploy with Rollback and Email Notifications

on:
  push:
    branches: [ main, master ]

jobs:
  build:
    name: 🛠️ Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest .

      - name: Save Docker Image as Tarball
        run: docker save ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest -o my-nginx-app.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-nginx-app.tar

  push:
    name: 📦 Push to Docker Hub
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i my-nginx-app.tar

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  deploy:
    name: 🚀 Deploy Locally
    needs: push
    runs-on: self-hosted

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull and Run Latest Image
        run: |
          echo "Pulling latest image..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

          echo "Stopping and removing current container if exists..."
          docker stop myapp || true
          docker rm myapp || true

          echo "Running new container on port 81..."
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

  rollback:
    name: 🔁 Rollback on Failure
    needs: deploy
    if: failure()
    runs-on: self-hosted

    steps:
      - name: Rollback to Previous Version
        run: |
          echo "Deployment failed. Rolling back..."
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 81:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:rollback

  notify:
    name: 📧 Send Email Notification
    needs: [deploy, rollback]
    runs-on: ubuntu-latest
    steps:
      - name: Send Success or Failure Email
        if: success()
        run: |
          SUBJECT="GitHub Actions SUCCESS: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="SUCCESS: Deployment succeeded for commit ${{ github.sha }} in repository ${{ github.repository }}.
          Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure

      - name: Send Failure Email
        if: failure()
        run: |
          SUBJECT="GitHub Actions FAILURE: ${{ github.workflow }} #${{ github.run_number }}"
          BODY="FAILURE: Deployment failed for commit ${{ github.sha }} in repository ${{ github.repository }}.
          Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo "Subject: $SUBJECT\nTo: ${{ secrets.TO_EMAIL }}\n\n$BODY" > mail.txt

          curl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
            --mail-from "${{ secrets.GMAIL_USER }}" \
            --mail-rcpt "${{ secrets.TO_EMAIL }}" \
            --upload-file mail.txt \
            --user "${{ secrets.GMAIL_USER }}:${{ secrets.GMAIL_PASS }}" \
            --insecure
